{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selamat Datang Di Halaman Web A. Fadilah Aini \u00b6 Profil Singkat \u00b6 Nama : A.Fadilah Aini NIM : 180411100114 Kelas : Komputasi Numerik Kelas A Dosen Pengampuh : Mulaab, S.Si, M.Kom Program Studi : Teknik Informatikaaa","title":"Home"},{"location":"#selamat-datang-di-halaman-web-a-fadilah-aini","text":"","title":"Selamat Datang Di Halaman Web A. Fadilah Aini"},{"location":"#profil-singkat","text":"Nama : A.Fadilah Aini NIM : 180411100114 Kelas : Komputasi Numerik Kelas A Dosen Pengampuh : Mulaab, S.Si, M.Kom Program Studi : Teknik Informatikaaa","title":"Profil Singkat"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/","text":"1. Mengukur Jarak Tipe Numerik \u00b6 Ada beberapa ukuran similaritas data ukuran jarak, diantaranya: a) Minkowski Distance \u00b6 Kelompok Minkowski diantaranya adalah Euclidean distance dan Manhattan distance, Minkowski distance dinyatakan dengan: $$ \\begin{align} d _ { \\operatorname { min } } = ( \\sum _ { i = 1 } ^ { n } | x _ { i } - y _ { i } | ^ { m } ) ^ { \\frac { 1 } { m } } , m \\geq 1 \\end{align} $$ b) Manhattan Distance \u00b6 Manhattan distance ialah kasus khusus dimana jarak dari minkoswski distance pada m= 1. Manhattan distance sensitif terhadap outlier. Jika ukuran ini digunakan dalam algoritma cleustering maka bentuk cleuster adalah hyper-rectangular. Ukuran ini dinyatakan dengan: $$ d _ { \\operatorname { man } } = \\sum _ { i = 1 } ^ { n } \\left| x _ { i } - y _ { i } \\right| $$ c) Euclidean Distance \u00b6 Euclidean distance ialah metode pengukuran yang paling sering digunakan, euclidean distance menghitung akar dari kuadrat perbedaan dua buah atau lebih vektor. Metode ini dapat digunakan untuk mendeteksi tingkat ketidaksamaan citra dengan cara mengisi nilai vektor p dan q dengan nilai fitur citra yang akan dideteksi tingkat ketidaksamaannya. Euclidean distance memiliki kelemahan yaitu jika dua vektor data tidak memiliki nilai atribut yang sama, kemungkinan memiliki jarak yang lebih kecil daripada pasangan vektro data lainnya yang mengandung nilai atribut yang sama. d) Average Distance \u00b6 Dikarenakan kekurangan dari jarak euclidian distance diatas, maka rata-rata jarak adalah versi modifikasi dari jarak euclidian distance untuk memperbaiki hasil. Rata-rata jarak didefinisikan dengan: $$ d _ { a v e } = \\left ( \\frac { 1 } { n } \\sum _ { i = 1 } ^ { n } ( x _ { i } - y _ { i } ) ^ { 2 } \\right) ^ { \\frac { 1 } { 2 } } $$ e) Weighted Euclidean Distance \u00b6 Jika berdasarkan tingkat penting dari masing-masing atribut ditentukan, maka weihted euclidean distance adalah modifikasi lain dari jarak euclidean distance yang dapat digunakan. Ukuran ini didefinisikan dengan: $$ d _ { w e } = \\left ( \\sum _ { i = 1 } ^ { n } w _ { i } ( x _ { i } - y _ { i } \\right) ^ { 2 } ) ^ { \\frac { 1 } { 2 } } $$ f) Chord Distance \u00b6 Chord distance adalah salah satu ukuran modifikasi euclidean distance untuk mengatasi kekurangan dari euclidean distance. Jarak ini dapat juga dihitung dari data yang tidak dinormalisasi, Chord distance didefinisikan dengan: $$ d _ { w e } = \\left ( \\sum _ { i = 1 } ^ { n } w _ { i } ( x _ { i } - y _ { i } \\right) ^ { 2 } ) ^ { \\frac { 1 } { 2 } } $$ g) Mahalanobis Distance \u00b6 Jarak mahalanobis yang teratur dapat digunakan untuk mengekstaksi hyperellipsoidal clusters. Jarak mahanalobis dapat mengurangi distorsi yang disebabkan oleh korelasi linier antar fitur dengan menerapkan transformasi pemutihan ke data atau dengan menggunakan kuadrat jarak mahalanobis. Mahalanobis distance didefinisikan dengan: $$ d _ { m a h } = \\sqrt { ( x - y ) S ^ { - 1 } ( x - y ) ^ { T } } $$ h) Cosine Measure \u00b6 Ukuran cosine similarty lebih banyak digunakan dalam similaritas dokumen dan didefinisikan dengan: $$ Cosine(x,y)=\\frac { \\sum _ { i = 1 } ^ { n } x _ { i } y _ { i } } { | x | _ { 2 } | y | _ { 2 } } $$ i) Pearson Correlation \u00b6 Pearson correlation banyak digunakan pada data expresi gen. ukuran ini menghitung antara dua bentuk pola expresi gen. pearson corralatin didefinisikan dengan: $$ Pearson ( x , y ) = \\frac { \\sum _ { i = 1 } ^ { n } ( x _ { i } - \\mu _ { x } ) ( y _ { i } - \\mu _ { y } ) } { \\sqrt { \\sum _ { i = 1 } ^ { n } ( x _ { i } - y _ { i } ) ^ { 2 } } \\sqrt { \\sum _ { i = 1 } ^ { n } ( x _ { i } - y _ { i } ) ^ { 2 } } } $$ 2.Mengukur Jarak Atribut Binary \u00b6 Similaritas dan desimilirity untuk objek yang dijelaskan oleh atribut biner simetris atau asimetris. Aatribut biner hanya memiliki dua status: 0 dan 1 Contoh atribut perokok menggambarkan seorang pasien, misalnya, 1 menunju kkan bahwa pasien merokok, sedangkan 0 menunjukkan pasien tidak merokok. Memperlakukan atribut biner sebagai atribut numerik tidak diperkennkan. Oleh karena itu,metode khusus untuk data biner diperlukan untuk membedakan komputasi. Dissimilarity dan Similarity \u00b6 Rumus dissimilarity antara ii dan jj dan dinyatankan sebagai atribut biner simetris adalah: $$ \\begin{align} d(i,j) = \\frac {r+s}{q+r+s+t} \\end{align} $$ Rumusmedunissimilarity antara ii d n jj dan dinyatankan sebagai atribut binimetris adalah: $$ \\begin{align} d(i,j) = \\frac {r+s}{q+r+s} \\end{align} $$ Persamaan similarity Jaccard coefficient rumusnya adalah: $$ \\begin{align} sim(i,j) = \\frac {q}{q+r+s} = 1-d(i,j) \\end{align} $$ 3.Mengukur Jarak Menggunakan Catergorical \u00b6 1. Overlay Metric \u00b6 Untuk semua atribut bertipe nominal, ukuran jarak yang paling sederhana adalah Overlay Metric (OM) dinyatakan dengan $$ \\begin{align} d(x,y) = \\sum_{i=1}^n\\delta(a_i(x),a_i(y)) \\end{align} $$ Dimana nn adalah banyaknya atribut, ai(x)ai(x) dan ai(y)ai(y) adalah nilai atribut ke ii yaitu AiAi dari masing-masing objek xx dan yy, \u03b4(ai(x))(ai(y))\u03b4(ai(x))(ai(y)) adalah 0 jika ai(x)ai(x) = ai(y)ai(y) dan 1 jika sebaliknya. 2. Value Difference Metri \u00b6 VDM dikenalkan oleh Standfill and Waltz, versi sederhana dari VDM tanpa skema pembobotan didefinsisikan dengan: $$ \\begin{align} d(x,y) = \\sum_{i=1}^n\\sum_{c=1}^C|P(c|a_i(x)) - P(c|a_i(y)) \\end{align} $$ Dimana CC adalah banyaknya kelas, P(c|ai(x))P(c|ai(x)) adalah probabilitas bersyarat dimana kelas xx adalah cc dari atribut AiAi, yang memilki nilai ai(x)ai(x), P(c|ai(y))P(c|ai(y)) adalah probabilitas bersyarat dimana kelas y adalah c dengan atribut AiAi memiliki nilai ai(y). 3. Minimum Risk Metric \u00b6 Ukuran ini dipresentasikan oleh Blanzieri and Ricci, berbeda dari SFM yaitu meminimumkan selisih antara kesalahan berhingga dan kesalahan asymtotic. MRM meminimumkan risk of misclassification yang didefinisikan dengan: $$ \\begin{align} d(x,y) = \\sum_{c=1}^C|P(c|x) (1 - P(c|y)) \\end{align} $$ 4. Mengukur Jarak Tipe Ordinal \u00b6 Perlakuan untuk atribut ordinal adalah cukup sama dengan atribut numerik ketika menghitung disimilarity antara objek. Misalkan ff adalah atribut-atribut dari atribut ordinak dan nn objek. Menghitung disimilarity terhadap ff fitur sebagai berikut: - Nilai ff untuk objek ke-ii adalah xifxif, dan ff memiliki MfMf status urutan, mewakili peringkat 1,...,Mf1,...,Mf ganti setiap XifXif dengan peringkatnya rif\u22081...MMfrif\u22081...MMf Karena setiap atribut ordinal dapat memiliki jumlah state yang berbeda, diperlukan untuk memetakan rentang setiap atribut ke [0,0, 1.0] sehingga setiap atribut memiliki bobot yang sama. Perl melakukan normalisasi data dengan mengganti peringkat rifrif dengan $$ \\begin{align} z_{if} = \\frac{r_{if} - 1}{M_f - 1} \\end{align} $$ Dissimilarity kemudian dihitung dengan menggunakan ukuran jarak seperti atribut numerik dengan data yang baru setelah ditransformasi zif 5. Mengukur Jarak Tipe Campuran \u00b6 \\begin{align} d(i,j) = \\frac{\\sum_{f=1}^p\\delta_{ij}^{(f)} d_{ij}^{(f)}}{\\sum_{f=1}^pd_{ij}^{(f)}} \\end{align} \\begin{align} d(i,j) = \\frac{\\sum_{f=1}^p\\delta_{ij}^{(f)} d_{ij}^{(f)}}{\\sum_{f=1}^pd_{ij}^{(f)}} \\end{align} import pandas as pd from scipy import stats import numpy as np import seaborn as sns import matplotlib.pyplot as plt data = pd . read_csv ( \"Abalone.csv\" , delimiter = \";\" ) k = data . iloc [ 0 : 18 ] def jarak ( v1 , v2 ): return (( chordDist ( v1 , v2 , numerical ) + ordDist ( v1 , v2 , ordinal ) + categoricalDist ( v1 , v2 , categorical ) + binaryDist ( v1 , v2 , binary )) / 4 ) from IPython.display import HTML , display import tabulate table = [ [ \"Data\" ] + [ \"Jarak\" ] + [ \"Numeric\" ] + [ \"Ordinal\" ] + [ \"Categorical\" ] + [ \"Binary\" ], [ \"v1-v2\" ] + [ 0 ] + [ \" {:.2f} \" . format ( chordDist ( 0 , 1 , numerical ))] + [ \" {:.2f} \" . format ( ordDist ( 0 , 1 , ordinal ))] + [ categoricalDist ( 0 , 1 , categorical )] + [ binaryDist ( 0 , 1 , binary )], [ \"v1-v3\" ] + [ 0 ] + [ \" {:.2f} \" . format ( chordDist ( 0 , 2 , numerical ))] + [ \" {:.2f} \" . format ( ordDist ( 0 , 2 , ordinal ))] + [ categoricalDist ( 0 , 2 , categorical )] + [ binaryDist ( 0 , 1 , binary )], [ \"v2-v3\" ] + [ 0 ] + [ \" {:.2f} \" . format ( chordDist ( 1 , 2 , numerical ))] + [ \" {:.2f} \" . format ( ordDist ( 1 , 2 , ordinal ))] + [ categoricalDist ( 1 , 2 , categorical )] + [ binaryDist ( 0 , 1 , binary )], [ \"v3-v4\" ] + [ 0 ] + [ \" {:.2f} \" . format ( chordDist ( 2 , 3 , numerical ))] + [ \" {:.2f} \" . format ( ordDist ( 2 , 3 , ordinal ))] + [ categoricalDist ( 2 , 3 , categorical )] + [ binaryDist ( 0 , 1 , binary )], [ \"v4-v5\" ] + [ 0 ] + [ \" {:.2f} \" . format ( chordDist ( 3 , 4 , numerical ))] + [ \" {:.2f} \" . format ( ordDist ( 3 , 4 , ordinal ))] + [ categoricalDist ( 3 , 4 , categorical )] + [ binaryDist ( 0 , 1 , binary )], [ \"v5-v6\" ] + [ 0 ] + [ \" {:.2f} \" . format ( chordDist ( 4 , 5 , numerical ))] + [ \" {:.2f} \" . format ( ordDist ( 4 , 5 , ordinal ))] + [ categoricalDist ( 4 , 5 , categorical )] + [ binaryDist ( 0 , 1 , binary )], ] display ( HTML ( tabulate . tabulate ( table , tablefmt = 'html' )))","title":"Mengukur Jarak Data (Penambangan Data)"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#1-mengukur-jarak-tipe-numerik","text":"Ada beberapa ukuran similaritas data ukuran jarak, diantaranya:","title":"1. Mengukur Jarak Tipe Numerik"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#a-minkowski-distance","text":"Kelompok Minkowski diantaranya adalah Euclidean distance dan Manhattan distance, Minkowski distance dinyatakan dengan: $$ \\begin{align} d _ { \\operatorname { min } } = ( \\sum _ { i = 1 } ^ { n } | x _ { i } - y _ { i } | ^ { m } ) ^ { \\frac { 1 } { m } } , m \\geq 1 \\end{align} $$","title":"a) Minkowski Distance"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#b-manhattan-distance","text":"Manhattan distance ialah kasus khusus dimana jarak dari minkoswski distance pada m= 1. Manhattan distance sensitif terhadap outlier. Jika ukuran ini digunakan dalam algoritma cleustering maka bentuk cleuster adalah hyper-rectangular. Ukuran ini dinyatakan dengan: $$ d _ { \\operatorname { man } } = \\sum _ { i = 1 } ^ { n } \\left| x _ { i } - y _ { i } \\right| $$","title":"b) Manhattan Distance"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#c-euclidean-distance","text":"Euclidean distance ialah metode pengukuran yang paling sering digunakan, euclidean distance menghitung akar dari kuadrat perbedaan dua buah atau lebih vektor. Metode ini dapat digunakan untuk mendeteksi tingkat ketidaksamaan citra dengan cara mengisi nilai vektor p dan q dengan nilai fitur citra yang akan dideteksi tingkat ketidaksamaannya. Euclidean distance memiliki kelemahan yaitu jika dua vektor data tidak memiliki nilai atribut yang sama, kemungkinan memiliki jarak yang lebih kecil daripada pasangan vektro data lainnya yang mengandung nilai atribut yang sama.","title":"c) Euclidean Distance"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#d-average-distance","text":"Dikarenakan kekurangan dari jarak euclidian distance diatas, maka rata-rata jarak adalah versi modifikasi dari jarak euclidian distance untuk memperbaiki hasil. Rata-rata jarak didefinisikan dengan: $$ d _ { a v e } = \\left ( \\frac { 1 } { n } \\sum _ { i = 1 } ^ { n } ( x _ { i } - y _ { i } ) ^ { 2 } \\right) ^ { \\frac { 1 } { 2 } } $$","title":"d) Average Distance"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#e-weighted-euclidean-distance","text":"Jika berdasarkan tingkat penting dari masing-masing atribut ditentukan, maka weihted euclidean distance adalah modifikasi lain dari jarak euclidean distance yang dapat digunakan. Ukuran ini didefinisikan dengan: $$ d _ { w e } = \\left ( \\sum _ { i = 1 } ^ { n } w _ { i } ( x _ { i } - y _ { i } \\right) ^ { 2 } ) ^ { \\frac { 1 } { 2 } } $$","title":"e) Weighted Euclidean Distance"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#f-chord-distance","text":"Chord distance adalah salah satu ukuran modifikasi euclidean distance untuk mengatasi kekurangan dari euclidean distance. Jarak ini dapat juga dihitung dari data yang tidak dinormalisasi, Chord distance didefinisikan dengan: $$ d _ { w e } = \\left ( \\sum _ { i = 1 } ^ { n } w _ { i } ( x _ { i } - y _ { i } \\right) ^ { 2 } ) ^ { \\frac { 1 } { 2 } } $$","title":"f) Chord Distance"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#g-mahalanobis-distance","text":"Jarak mahalanobis yang teratur dapat digunakan untuk mengekstaksi hyperellipsoidal clusters. Jarak mahanalobis dapat mengurangi distorsi yang disebabkan oleh korelasi linier antar fitur dengan menerapkan transformasi pemutihan ke data atau dengan menggunakan kuadrat jarak mahalanobis. Mahalanobis distance didefinisikan dengan: $$ d _ { m a h } = \\sqrt { ( x - y ) S ^ { - 1 } ( x - y ) ^ { T } } $$","title":"g) Mahalanobis Distance"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#h-cosine-measure","text":"Ukuran cosine similarty lebih banyak digunakan dalam similaritas dokumen dan didefinisikan dengan: $$ Cosine(x,y)=\\frac { \\sum _ { i = 1 } ^ { n } x _ { i } y _ { i } } { | x | _ { 2 } | y | _ { 2 } } $$","title":"h) Cosine Measure"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#i-pearson-correlation","text":"Pearson correlation banyak digunakan pada data expresi gen. ukuran ini menghitung antara dua bentuk pola expresi gen. pearson corralatin didefinisikan dengan: $$ Pearson ( x , y ) = \\frac { \\sum _ { i = 1 } ^ { n } ( x _ { i } - \\mu _ { x } ) ( y _ { i } - \\mu _ { y } ) } { \\sqrt { \\sum _ { i = 1 } ^ { n } ( x _ { i } - y _ { i } ) ^ { 2 } } \\sqrt { \\sum _ { i = 1 } ^ { n } ( x _ { i } - y _ { i } ) ^ { 2 } } } $$","title":"i) Pearson Correlation"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#2mengukur-jarak-atribut-binary","text":"Similaritas dan desimilirity untuk objek yang dijelaskan oleh atribut biner simetris atau asimetris. Aatribut biner hanya memiliki dua status: 0 dan 1 Contoh atribut perokok menggambarkan seorang pasien, misalnya, 1 menunju kkan bahwa pasien merokok, sedangkan 0 menunjukkan pasien tidak merokok. Memperlakukan atribut biner sebagai atribut numerik tidak diperkennkan. Oleh karena itu,metode khusus untuk data biner diperlukan untuk membedakan komputasi.","title":"2.Mengukur Jarak Atribut Binary"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#dissimilarity-dan-similarity","text":"Rumus dissimilarity antara ii dan jj dan dinyatankan sebagai atribut biner simetris adalah: $$ \\begin{align} d(i,j) = \\frac {r+s}{q+r+s+t} \\end{align} $$ Rumusmedunissimilarity antara ii d n jj dan dinyatankan sebagai atribut binimetris adalah: $$ \\begin{align} d(i,j) = \\frac {r+s}{q+r+s} \\end{align} $$ Persamaan similarity Jaccard coefficient rumusnya adalah: $$ \\begin{align} sim(i,j) = \\frac {q}{q+r+s} = 1-d(i,j) \\end{align} $$","title":"Dissimilarity dan Similarity"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#3mengukur-jarak-menggunakan-catergorical","text":"","title":"3.Mengukur Jarak Menggunakan Catergorical"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#1-overlay-metric","text":"Untuk semua atribut bertipe nominal, ukuran jarak yang paling sederhana adalah Overlay Metric (OM) dinyatakan dengan $$ \\begin{align} d(x,y) = \\sum_{i=1}^n\\delta(a_i(x),a_i(y)) \\end{align} $$ Dimana nn adalah banyaknya atribut, ai(x)ai(x) dan ai(y)ai(y) adalah nilai atribut ke ii yaitu AiAi dari masing-masing objek xx dan yy, \u03b4(ai(x))(ai(y))\u03b4(ai(x))(ai(y)) adalah 0 jika ai(x)ai(x) = ai(y)ai(y) dan 1 jika sebaliknya.","title":"1. Overlay Metric"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#2-value-difference-metri","text":"VDM dikenalkan oleh Standfill and Waltz, versi sederhana dari VDM tanpa skema pembobotan didefinsisikan dengan: $$ \\begin{align} d(x,y) = \\sum_{i=1}^n\\sum_{c=1}^C|P(c|a_i(x)) - P(c|a_i(y)) \\end{align} $$ Dimana CC adalah banyaknya kelas, P(c|ai(x))P(c|ai(x)) adalah probabilitas bersyarat dimana kelas xx adalah cc dari atribut AiAi, yang memilki nilai ai(x)ai(x), P(c|ai(y))P(c|ai(y)) adalah probabilitas bersyarat dimana kelas y adalah c dengan atribut AiAi memiliki nilai ai(y).","title":"2. Value Difference Metri"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#3-minimum-risk-metric","text":"Ukuran ini dipresentasikan oleh Blanzieri and Ricci, berbeda dari SFM yaitu meminimumkan selisih antara kesalahan berhingga dan kesalahan asymtotic. MRM meminimumkan risk of misclassification yang didefinisikan dengan: $$ \\begin{align} d(x,y) = \\sum_{c=1}^C|P(c|x) (1 - P(c|y)) \\end{align} $$","title":"3. Minimum Risk Metric"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#4-mengukur-jarak-tipe-ordinal","text":"Perlakuan untuk atribut ordinal adalah cukup sama dengan atribut numerik ketika menghitung disimilarity antara objek. Misalkan ff adalah atribut-atribut dari atribut ordinak dan nn objek. Menghitung disimilarity terhadap ff fitur sebagai berikut: - Nilai ff untuk objek ke-ii adalah xifxif, dan ff memiliki MfMf status urutan, mewakili peringkat 1,...,Mf1,...,Mf ganti setiap XifXif dengan peringkatnya rif\u22081...MMfrif\u22081...MMf Karena setiap atribut ordinal dapat memiliki jumlah state yang berbeda, diperlukan untuk memetakan rentang setiap atribut ke [0,0, 1.0] sehingga setiap atribut memiliki bobot yang sama. Perl melakukan normalisasi data dengan mengganti peringkat rifrif dengan $$ \\begin{align} z_{if} = \\frac{r_{if} - 1}{M_f - 1} \\end{align} $$ Dissimilarity kemudian dihitung dengan menggunakan ukuran jarak seperti atribut numerik dengan data yang baru setelah ditransformasi zif","title":"4. Mengukur Jarak Tipe Ordinal"},{"location":"Mengukur%20Jarak%20Data%20%28Penambangan%20Data%29/#5-mengukur-jarak-tipe-campuran","text":"\\begin{align} d(i,j) = \\frac{\\sum_{f=1}^p\\delta_{ij}^{(f)} d_{ij}^{(f)}}{\\sum_{f=1}^pd_{ij}^{(f)}} \\end{align} \\begin{align} d(i,j) = \\frac{\\sum_{f=1}^p\\delta_{ij}^{(f)} d_{ij}^{(f)}}{\\sum_{f=1}^pd_{ij}^{(f)}} \\end{align} import pandas as pd from scipy import stats import numpy as np import seaborn as sns import matplotlib.pyplot as plt data = pd . read_csv ( \"Abalone.csv\" , delimiter = \";\" ) k = data . iloc [ 0 : 18 ] def jarak ( v1 , v2 ): return (( chordDist ( v1 , v2 , numerical ) + ordDist ( v1 , v2 , ordinal ) + categoricalDist ( v1 , v2 , categorical ) + binaryDist ( v1 , v2 , binary )) / 4 ) from IPython.display import HTML , display import tabulate table = [ [ \"Data\" ] + [ \"Jarak\" ] + [ \"Numeric\" ] + [ \"Ordinal\" ] + [ \"Categorical\" ] + [ \"Binary\" ], [ \"v1-v2\" ] + [ 0 ] + [ \" {:.2f} \" . format ( chordDist ( 0 , 1 , numerical ))] + [ \" {:.2f} \" . format ( ordDist ( 0 , 1 , ordinal ))] + [ categoricalDist ( 0 , 1 , categorical )] + [ binaryDist ( 0 , 1 , binary )], [ \"v1-v3\" ] + [ 0 ] + [ \" {:.2f} \" . format ( chordDist ( 0 , 2 , numerical ))] + [ \" {:.2f} \" . format ( ordDist ( 0 , 2 , ordinal ))] + [ categoricalDist ( 0 , 2 , categorical )] + [ binaryDist ( 0 , 1 , binary )], [ \"v2-v3\" ] + [ 0 ] + [ \" {:.2f} \" . format ( chordDist ( 1 , 2 , numerical ))] + [ \" {:.2f} \" . format ( ordDist ( 1 , 2 , ordinal ))] + [ categoricalDist ( 1 , 2 , categorical )] + [ binaryDist ( 0 , 1 , binary )], [ \"v3-v4\" ] + [ 0 ] + [ \" {:.2f} \" . format ( chordDist ( 2 , 3 , numerical ))] + [ \" {:.2f} \" . format ( ordDist ( 2 , 3 , ordinal ))] + [ categoricalDist ( 2 , 3 , categorical )] + [ binaryDist ( 0 , 1 , binary )], [ \"v4-v5\" ] + [ 0 ] + [ \" {:.2f} \" . format ( chordDist ( 3 , 4 , numerical ))] + [ \" {:.2f} \" . format ( ordDist ( 3 , 4 , ordinal ))] + [ categoricalDist ( 3 , 4 , categorical )] + [ binaryDist ( 0 , 1 , binary )], [ \"v5-v6\" ] + [ 0 ] + [ \" {:.2f} \" . format ( chordDist ( 4 , 5 , numerical ))] + [ \" {:.2f} \" . format ( ordDist ( 4 , 5 , ordinal ))] + [ categoricalDist ( 4 , 5 , categorical )] + [ binaryDist ( 0 , 1 , binary )], ] display ( HTML ( tabulate . tabulate ( table , tablefmt = 'html' )))","title":"5. Mengukur Jarak Tipe Campuran"},{"location":"Pengertian%20%28Andi%29/","text":"Pendekatan Deret MacLaurin \u00b6 DERET MacLaurin adalah Suatu fungsi f(x) yang memiliki turunan f'(x), f''(x), f'''(x) dan seterusnya yang kontinyu dalam interval I dengan a, x I maka untuk x disekitar a yaitu |x-a|< R , f(x) dapat diekspansi kedalam Deret Taylor. Dalam kasus khusus jika a=0 , maka disebut Deret MacLaurin atau sering disebut Deret Taylor baku. Dan didefinisikan sebagai berikut Definisi : $$ f(x)=f(0)+{f^{1}(0)}x+\\frac{f^{2}(0)}{2 !} x^{2}+\\frac{f^{3}(0)}{3 !} x^{3}+\\frac{f^{4}(0)}{4 !} x^{4} + ...+\\frac{f^{n}(0)}{n !} x^{n} $$ Atau bisa dinyatakan dengan: $$ f(x)=\\sum_{n=0}^\\infty \\frac{f^{(n)}n(0)}{n!}x^{n} $$ Deret MacLaurin sangat bermanfaat dalam metode numerik untuk menghitung atau menghampiri nilai-nilai fungsi yang sudah dihitung secara manual seperti nilai sin x, cos x , . Tugas \u00b6 Hitunglah e^2x untuk nilai x=4, kemudian expensikan hingga selisih yang dihasilkan kurang dari nilai error yang ditentukan yaitu e < 0,001. Penyelesaian \u00b6 Fungsi awal exponen : $$ f(x) = e^{2x}\\ $$ Dapat juga didefinisikan dengan rumus : $$ e^{2x} = \\sum_{n=0}^\\infty \\frac{(2x)^n}{n!} = \\sum_{n=0}^\\infty (2)^n\\frac{x^n}{n!} $$ Tabel perhitungan untuk turunan exponensial : f^1(a)=2e^{2x} f^1(a)=2e^{2x} f^2(a)=4e^{2x} f^2(a)=4e^{2x} f^3(a)=8e^{2x} f^3(a)=8e^{2x} f^4(a)=16e^{2x} f^4(a)=16e^{2x} ... ... Berikut adalah penyelesaian untuk mencari nilai expansi : $$ f(x)=f(0)+\\frac{f^{1}(0)}{1 !} x+\\frac{f^{2}(0)}{2 !} x^{2}+\\frac{f^{3}(0)}{3 !} x^{3}+\\frac{f^{4}(0)}{4 !} x^{4} + ...+\\frac{f^{n}(0)}{n !} x^{n}i : $$ nilai turunan pada tabel dimasukkan kedalam rumus sehingga didapatkan seperti ini : $$ f(x)=1+\\frac{2}{1 !} x+\\frac{4}{2 !} x^{2}+\\frac{8}{3 !} x^{3}+\\frac{16}{4 !} x^{4} + ...+\\frac{2^{n}}{n!} x^{n} $$ kemudian, nilai x diganti dengan 4 : $$ f(x)=1+\\frac{2}{1 !} 4+\\frac{4}{2 !} 4^{2}+\\frac{8}{3 !} 4^{3}+\\frac{16}{4 !} 4^{4} + ...+\\frac{2^{n}}{n !} 4^{n} $$ perhitungan diatas akan terus berulang hingga nilai selisih mendekati nilai error yang ditentukan yaitu kurang dari 0,001 Listing Program \u00b6 Script import math error = 0.001 def f ( x ): f_turunan = 1 current = i = 0 iteration = True while iteration : old = current current += ( f_turunan * ( x ** i )) / math . factorial ( i ) print ( 'f ke-' , i , '=' , 'Ea=' , current - old ) if current - old < error : iteration = False else : f_turunan *= 2 i += 1 f ( 4 ) Output f ke - 0 = 1.0 Ea = 1.0 f ke - 1 = 9.0 Ea = 8.0 f ke - 2 = 41.0 Ea = 32.0 f ke - 3 = 126.33333333333333 Ea = 85.33333333333333 f ke - 4 = 297.0 Ea = 170.66666666666669 f ke - 5 = 570.0666666666666 Ea = 273.0666666666666 f ke - 6 = 934.1555555555556 Ea = 364.08888888888896 f ke - 7 = 1350.2571428571428 Ea = 416.1015873015872 f ke - 8 = 1766.35873015873 Ea = 416.1015873015872 f ke - 9 = 2136.226807760141 Ea = 369.8680776014112 f ke - 10 = 2432.12126984127 Ea = 295.89446208112895 f ke - 11 = 2647.317242263909 Ea = 215.195972422639 f ke - 12 = 2790.781223879002 Ea = 143.46398161509296 f ke - 13 = 2879.0667510267513 Ea = 88.28552714774924 f ke - 14 = 2929.515623682608 Ea = 50.448872655856576 f ke - 15 = 2956.4216890990647 Ea = 26.90606541645684 f ke - 16 = 2969.874721807293 Ea = 13.45303270822842 f ke - 17 = 2976.2055607288125 Ea = 6.330838921519444 f ke - 18 = 2979.0192669161543 Ea = 2.8137061873417224 f ke - 19 = 2980.2039853108245 Ea = 1.184718394670199 f ke - 20 = 2980.6778726686925 Ea = 0.47388735786807956 f ke - 21 = 2980.8584011859757 Ea = 0.18052851728316455 f ke - 22 = 2980.924047919533 Ea = 0.06564673355751438 f ke - 23 = 2980.946881565988 Ea = 0.022833646454728296 f ke - 24 = 2980.9544927814727 Ea = 0.0076112154847578495 f ke - 25 = 2980.9569283704277 Ea = 0.0024355889549951826 f ke - 26 = 2980.957677782414 Ea = 0.0007494119863622473","title":"Maclaurin"},{"location":"Pengertian%20%28Andi%29/#pendekatan-deret-maclaurin","text":"DERET MacLaurin adalah Suatu fungsi f(x) yang memiliki turunan f'(x), f''(x), f'''(x) dan seterusnya yang kontinyu dalam interval I dengan a, x I maka untuk x disekitar a yaitu |x-a|< R , f(x) dapat diekspansi kedalam Deret Taylor. Dalam kasus khusus jika a=0 , maka disebut Deret MacLaurin atau sering disebut Deret Taylor baku. Dan didefinisikan sebagai berikut Definisi : $$ f(x)=f(0)+{f^{1}(0)}x+\\frac{f^{2}(0)}{2 !} x^{2}+\\frac{f^{3}(0)}{3 !} x^{3}+\\frac{f^{4}(0)}{4 !} x^{4} + ...+\\frac{f^{n}(0)}{n !} x^{n} $$ Atau bisa dinyatakan dengan: $$ f(x)=\\sum_{n=0}^\\infty \\frac{f^{(n)}n(0)}{n!}x^{n} $$ Deret MacLaurin sangat bermanfaat dalam metode numerik untuk menghitung atau menghampiri nilai-nilai fungsi yang sudah dihitung secara manual seperti nilai sin x, cos x , .","title":"Pendekatan Deret MacLaurin"},{"location":"Pengertian%20%28Andi%29/#tugas","text":"Hitunglah e^2x untuk nilai x=4, kemudian expensikan hingga selisih yang dihasilkan kurang dari nilai error yang ditentukan yaitu e < 0,001.","title":"Tugas"},{"location":"Pengertian%20%28Andi%29/#penyelesaian","text":"Fungsi awal exponen : $$ f(x) = e^{2x}\\ $$ Dapat juga didefinisikan dengan rumus : $$ e^{2x} = \\sum_{n=0}^\\infty \\frac{(2x)^n}{n!} = \\sum_{n=0}^\\infty (2)^n\\frac{x^n}{n!} $$ Tabel perhitungan untuk turunan exponensial : f^1(a)=2e^{2x} f^1(a)=2e^{2x} f^2(a)=4e^{2x} f^2(a)=4e^{2x} f^3(a)=8e^{2x} f^3(a)=8e^{2x} f^4(a)=16e^{2x} f^4(a)=16e^{2x} ... ... Berikut adalah penyelesaian untuk mencari nilai expansi : $$ f(x)=f(0)+\\frac{f^{1}(0)}{1 !} x+\\frac{f^{2}(0)}{2 !} x^{2}+\\frac{f^{3}(0)}{3 !} x^{3}+\\frac{f^{4}(0)}{4 !} x^{4} + ...+\\frac{f^{n}(0)}{n !} x^{n}i : $$ nilai turunan pada tabel dimasukkan kedalam rumus sehingga didapatkan seperti ini : $$ f(x)=1+\\frac{2}{1 !} x+\\frac{4}{2 !} x^{2}+\\frac{8}{3 !} x^{3}+\\frac{16}{4 !} x^{4} + ...+\\frac{2^{n}}{n!} x^{n} $$ kemudian, nilai x diganti dengan 4 : $$ f(x)=1+\\frac{2}{1 !} 4+\\frac{4}{2 !} 4^{2}+\\frac{8}{3 !} 4^{3}+\\frac{16}{4 !} 4^{4} + ...+\\frac{2^{n}}{n !} 4^{n} $$ perhitungan diatas akan terus berulang hingga nilai selisih mendekati nilai error yang ditentukan yaitu kurang dari 0,001","title":"Penyelesaian"},{"location":"Pengertian%20%28Andi%29/#listing-program","text":"Script import math error = 0.001 def f ( x ): f_turunan = 1 current = i = 0 iteration = True while iteration : old = current current += ( f_turunan * ( x ** i )) / math . factorial ( i ) print ( 'f ke-' , i , '=' , 'Ea=' , current - old ) if current - old < error : iteration = False else : f_turunan *= 2 i += 1 f ( 4 ) Output f ke - 0 = 1.0 Ea = 1.0 f ke - 1 = 9.0 Ea = 8.0 f ke - 2 = 41.0 Ea = 32.0 f ke - 3 = 126.33333333333333 Ea = 85.33333333333333 f ke - 4 = 297.0 Ea = 170.66666666666669 f ke - 5 = 570.0666666666666 Ea = 273.0666666666666 f ke - 6 = 934.1555555555556 Ea = 364.08888888888896 f ke - 7 = 1350.2571428571428 Ea = 416.1015873015872 f ke - 8 = 1766.35873015873 Ea = 416.1015873015872 f ke - 9 = 2136.226807760141 Ea = 369.8680776014112 f ke - 10 = 2432.12126984127 Ea = 295.89446208112895 f ke - 11 = 2647.317242263909 Ea = 215.195972422639 f ke - 12 = 2790.781223879002 Ea = 143.46398161509296 f ke - 13 = 2879.0667510267513 Ea = 88.28552714774924 f ke - 14 = 2929.515623682608 Ea = 50.448872655856576 f ke - 15 = 2956.4216890990647 Ea = 26.90606541645684 f ke - 16 = 2969.874721807293 Ea = 13.45303270822842 f ke - 17 = 2976.2055607288125 Ea = 6.330838921519444 f ke - 18 = 2979.0192669161543 Ea = 2.8137061873417224 f ke - 19 = 2980.2039853108245 Ea = 1.184718394670199 f ke - 20 = 2980.6778726686925 Ea = 0.47388735786807956 f ke - 21 = 2980.8584011859757 Ea = 0.18052851728316455 f ke - 22 = 2980.924047919533 Ea = 0.06564673355751438 f ke - 23 = 2980.946881565988 Ea = 0.022833646454728296 f ke - 24 = 2980.9544927814727 Ea = 0.0076112154847578495 f ke - 25 = 2980.9569283704277 Ea = 0.0024355889549951826 f ke - 26 = 2980.957677782414 Ea = 0.0007494119863622473","title":"Listing Program"},{"location":"Regresi%20Linier/","text":"Regresi Linier \u00b6 x1 x2 y 2 3 5 3 2 5 6 2 8 4 1 6 8 2 10 7 4 10 x1 x2 y x1y x2y x1x2 x1^2 x2^2 y^2 2 3 5 10 15 6 4 9 25 3 2 5 15 10 6 9 4 25 6 2 8 48 16 12 36 4 64 4 1 6 24 6 4 16 1 36 8 2 10 80 20 16 64 4 100 7 4 10 70 40 28 49 16 100 30 14 44 247 107 72 178 38 350 A= n . \\sum x_1y - (\\sum x_1)(\\sum y)= 6*247-30*44= 1482-1320= 162 A= n . \\sum x_1y - (\\sum x_1)(\\sum y)= 6*247-30*44= 1482-1320= 162 B= n . \\sum x_2^2 - (\\sum x_2)^2-(\\sum X_2)^2= 6*38-196= 228-196= 32 B= n . \\sum x_2^2 - (\\sum x_2)^2-(\\sum X_2)^2= 6*38-196= 228-196= 32 C= n . \\sum X_1 X_2- (\\sum X_1)(\\sum X_2)= 6*72-30*14= 432-420= 12 C= n . \\sum X_1 X_2- (\\sum X_1)(\\sum X_2)= 6*72-30*14= 432-420= 12 D= n . \\sum X_2Y- (\\sum X_2)(\\sum Y)= 6*107- 14*44= 642-616= 26 D= n . \\sum X_2Y- (\\sum X_2)(\\sum Y)= 6*107- 14*44= 642-616= 26 E= n. \\sum X_1^2-(\\sum X_1)^2 = 6*178-900=1068-900= 168 E= n. \\sum X_1^2-(\\sum X_1)^2 = 6*178-900=1068-900= 168 F= EB- C = 168*32-12=5376-12 =5354 F= EB- C = 168*32-12=5376-12 =5354 b1= \\frac{AB - CD}{F} = \\frac{(162)(32) - (12)(26)}{5354}= \\frac{5184- 312}{5354}= \\frac{4872}{5354}= 0,909 b1= \\frac{AB - CD}{F} = \\frac{(162)(32) - (12)(26)}{5354}= \\frac{5184- 312}{5354}= \\frac{4872}{5354}= 0,909 b2= \\frac{DE - AC}{F} = \\frac{(32)(168) - (162)(12)}{5354}= \\frac{5376 - 1644}{5354}= \\frac{3432}{5354}= 0,641 b2= \\frac{DE - AC}{F} = \\frac{(32)(168) - (162)(12)}{5354}= \\frac{5376 - 1644}{5354}= \\frac{3432}{5354}= 0,641 a= \\frac{\\sum y- b_1\\sum x_1- b_2\\sum x_2}{n} = \\frac{44-(0,909) (30)- (0,641)(14)}{6}= \\frac{7,756=}{6}= 1,292 $$ Hasil Akhir $$ {y}'= 1,292 + 0,909x_1 + 0,641 x_2 a= \\frac{\\sum y- b_1\\sum x_1- b_2\\sum x_2}{n} = \\frac{44-(0,909) (30)- (0,641)(14)}{6}= \\frac{7,756=}{6}= 1,292 $$ Hasil Akhir $$ {y}'= 1,292 + 0,909x_1 + 0,641 x_2 Pengecekan $$ x1 = 2 $$ $$ x2 = 8 $$ $$ y = a + b1x1 + b2x2 $$ import numpy as np from sklearn.linear_model import LinearRegression X = np . array ([[ 2 , 3 ], [ 3 , 2 ], [ 6 , 2 ], [ 4 , 1 ], [ 8 , 2 ], [ 7 , 4 ]]) y = np . array ([ 5 , 5 , 8 , 6 , 10 , 10 ]) X output: array ([[ 2 , 3 ], [ 3 , 2 ], [ 6 , 2 ], [ 4 , 1 ], [ 8 , 2 ], [ 7 , 4 ]]) reg = LinearRegression () . fit ( X , y ) reg . score ( X , y ) output 0.9932870888341911 a = reg . intercept_ a output 1.5963302752293584 b2 = reg . coef_ [ 1 ] b1 = reg . coef_ [ 0 ] x1 = 6 x2 = 2 b2 output 0.46330275229357804 y = b1 * x1 + b2 * x2 + a y output 16.0 reg . predict ( np . array ([[ 2 , 8 ]])) output array ([ 7.16513761 ])","title":"**Regresi Linier**"},{"location":"Regresi%20Linier/#regresi-linier","text":"x1 x2 y 2 3 5 3 2 5 6 2 8 4 1 6 8 2 10 7 4 10 x1 x2 y x1y x2y x1x2 x1^2 x2^2 y^2 2 3 5 10 15 6 4 9 25 3 2 5 15 10 6 9 4 25 6 2 8 48 16 12 36 4 64 4 1 6 24 6 4 16 1 36 8 2 10 80 20 16 64 4 100 7 4 10 70 40 28 49 16 100 30 14 44 247 107 72 178 38 350 A= n . \\sum x_1y - (\\sum x_1)(\\sum y)= 6*247-30*44= 1482-1320= 162 A= n . \\sum x_1y - (\\sum x_1)(\\sum y)= 6*247-30*44= 1482-1320= 162 B= n . \\sum x_2^2 - (\\sum x_2)^2-(\\sum X_2)^2= 6*38-196= 228-196= 32 B= n . \\sum x_2^2 - (\\sum x_2)^2-(\\sum X_2)^2= 6*38-196= 228-196= 32 C= n . \\sum X_1 X_2- (\\sum X_1)(\\sum X_2)= 6*72-30*14= 432-420= 12 C= n . \\sum X_1 X_2- (\\sum X_1)(\\sum X_2)= 6*72-30*14= 432-420= 12 D= n . \\sum X_2Y- (\\sum X_2)(\\sum Y)= 6*107- 14*44= 642-616= 26 D= n . \\sum X_2Y- (\\sum X_2)(\\sum Y)= 6*107- 14*44= 642-616= 26 E= n. \\sum X_1^2-(\\sum X_1)^2 = 6*178-900=1068-900= 168 E= n. \\sum X_1^2-(\\sum X_1)^2 = 6*178-900=1068-900= 168 F= EB- C = 168*32-12=5376-12 =5354 F= EB- C = 168*32-12=5376-12 =5354 b1= \\frac{AB - CD}{F} = \\frac{(162)(32) - (12)(26)}{5354}= \\frac{5184- 312}{5354}= \\frac{4872}{5354}= 0,909 b1= \\frac{AB - CD}{F} = \\frac{(162)(32) - (12)(26)}{5354}= \\frac{5184- 312}{5354}= \\frac{4872}{5354}= 0,909 b2= \\frac{DE - AC}{F} = \\frac{(32)(168) - (162)(12)}{5354}= \\frac{5376 - 1644}{5354}= \\frac{3432}{5354}= 0,641 b2= \\frac{DE - AC}{F} = \\frac{(32)(168) - (162)(12)}{5354}= \\frac{5376 - 1644}{5354}= \\frac{3432}{5354}= 0,641 a= \\frac{\\sum y- b_1\\sum x_1- b_2\\sum x_2}{n} = \\frac{44-(0,909) (30)- (0,641)(14)}{6}= \\frac{7,756=}{6}= 1,292 $$ Hasil Akhir $$ {y}'= 1,292 + 0,909x_1 + 0,641 x_2 a= \\frac{\\sum y- b_1\\sum x_1- b_2\\sum x_2}{n} = \\frac{44-(0,909) (30)- (0,641)(14)}{6}= \\frac{7,756=}{6}= 1,292 $$ Hasil Akhir $$ {y}'= 1,292 + 0,909x_1 + 0,641 x_2 Pengecekan $$ x1 = 2 $$ $$ x2 = 8 $$ $$ y = a + b1x1 + b2x2 $$ import numpy as np from sklearn.linear_model import LinearRegression X = np . array ([[ 2 , 3 ], [ 3 , 2 ], [ 6 , 2 ], [ 4 , 1 ], [ 8 , 2 ], [ 7 , 4 ]]) y = np . array ([ 5 , 5 , 8 , 6 , 10 , 10 ]) X output: array ([[ 2 , 3 ], [ 3 , 2 ], [ 6 , 2 ], [ 4 , 1 ], [ 8 , 2 ], [ 7 , 4 ]]) reg = LinearRegression () . fit ( X , y ) reg . score ( X , y ) output 0.9932870888341911 a = reg . intercept_ a output 1.5963302752293584 b2 = reg . coef_ [ 1 ] b1 = reg . coef_ [ 0 ] x1 = 6 x2 = 2 b2 output 0.46330275229357804 y = b1 * x1 + b2 * x2 + a y output 16.0 reg . predict ( np . array ([[ 2 , 8 ]])) output array ([ 7.16513761 ])","title":"Regresi Linier"},{"location":"authors-notes/","text":"Pendekatan Deret MacLaurin \u00b6 DERET MacLaurin adalah Suatu fungsi f(x) yang memiliki turunan f'(x), f''(x), f'''(x) dan seterusnya yang kontinyu dalam interval I dengan a, x I maka untuk x disekitar a yaitu |x-a|< R , f(x) dapat diekspansi kedalam Deret Taylor. Dalam kasus khusus jika a=0 , maka disebut Deret MacLaurin atau sering disebut Deret Taylor baku. Dan didefinisikan sebagai berikut Definisi : $$ f(x)=f(0)+f\u2019(0)x \\displaystyle+\\frac{{{f}\\text{'}\\text{'}{\\left({0}\\right)}}}{{{2}!}}{x}^{2} \\displaystyle+\\frac{{{f}\\text{'}\\text{'}\\text{'}{\\left({0}\\right)}}}{{{3}!}}{x}^{3} \\displaystyle+\\ldots \\displaystyle+\\frac{{{{f}^{{\\text{n}}}{\\left({0}\\right)}}}}{{{n}!}}{x}^{n} $$ Atau bisa dinyatakan dengan: $$ f(x)=\\sum_{n=0}^\\infty \\frac{f^{(n)}n(0)}{n!}x^{n} $$ Deret MacLaurin sangat bermanfaat dalam metode numerik untuk menghitung atau menghampiri nilai-nilai fungsi yang sudah dihitung secara manual seperti nilai sin x, cos x , . Tugas \u00b6 Hitunglah e^2x untuk nilai x=4, kemudian expensikan hingga selisih yang dihasilkan kurang dari nilai error yang ditentukan yaitu e < 0,001. Penyelesaian \u00b6 Fungsi awal exponen : $$ f(x) = e^{2x}\\ $$ Dapat juga didefinisikan dengan rumus : $$ e^{2x} = \\sum_{n=0}^\\infty \\frac{(2x)^n}{n!} = \\sum_{n=0}^\\infty (2)^n\\frac{x^n}{n!} $$ Tabel perhitungan untuk turunan exponensial : $$ \\begin{array}{|c|c|l|} \\hline f(x) & e^{2 x} & f(0)=1 \\ \\hline f^{\\prime}(x) & 2 e^{2 x} & f^{\\prime}(0)=2 \\ \\hline f^{\\prime \\prime}(x) & 4 e^{2 x} & f^{\\prime \\prime}(0)=4 \\ \\hline f^{\\prime \\prime \\prime}(x) & 8 e^{2 x} & f^{\\prime \\prime \\prime}(0)=8 \\ \\hline f^{\\prime \\prime \\prime \\prime}(x) & 16 e^{2 x} & f^{\\prime \\prime \\prime \\prime}(0)=16 \\ \\hline \\end{array} $$ Berikut adalah penyelesaian untuk mencari nilai expansi : $$ f(x)=f(0)+\\frac{f^{\\prime}(0)}{1 !} x+\\frac{f^{\\prime \\prime}(0)}{2 !} x^{2}+\\frac{f^{\\prime \\prime \\prime}(0)}{3 !} x^{3}+\\frac{f^{\\prime \\prime \\prime \\prime}(0)}{4 !} x^{4} + ... $$ nilai turunan pada tabel dimasukkan kedalam rumus sehingga didapatkan seperti ini : $$ f(x)=1+\\frac{2}{1 !} x+\\frac{4}{2 !} x^{2}+\\frac{8}{3 !} x^{3}+\\frac{16}{4 !} x^{4} + ... $$ kemudian, nilai x diganti dengan 4 : $$ f(x)=1+\\frac{2}{1 !} 4+\\frac{4}{2 !} 4^{2}+\\frac{8}{3 !} 4^{3}+\\frac{16}{4 !} 4^{4} + ... $$ perhitungan diatas akan terus berulang hingga nilai selisih mendekati nilai error yang ditentukan yaitu kurang dari 0,001 Listing Program \u00b6 Script import math error = 0.001 def f ( x ): f_turunan = 1 current = i = 0 iteration = True while iteration : old = current current += ( f_turunan * ( x ** i )) / math . factorial ( i ) print ( 'f ke-' , i , '=' , 'Ea=' , current - old ) if current - old < error : iteration = False else : f_turunan *= 2 i += 1 f ( 4 ) Output f ke - 0 = Ea = 1.0 f ke - 1 = Ea = 8.0 f ke - 2 = Ea = 32.0 f ke - 3 = Ea = 85.33333333333333 f ke - 4 = Ea = 170.66666666666669 f ke - 5 = Ea = 273.0666666666666 f ke - 6 = Ea = 364.08888888888896 f ke - 7 = Ea = 416.1015873015872 f ke - 8 = Ea = 416.1015873015872 f ke - 9 = Ea = 369.8680776014112 f ke - 10 = Ea = 295.89446208112895 f ke - 11 = Ea = 215.195972422639 f ke - 12 = Ea = 143.46398161509296 f ke - 13 = Ea = 88.28552714774924 f ke - 14 = Ea = 50.448872655856576 f ke - 15 = Ea = 26.90606541645684 f ke - 16 = Ea = 13.45303270822842 f ke - 17 = Ea = 6.330838921519444 f ke - 18 = Ea = 2.8137061873417224 f ke - 19 = Ea = 1.184718394670199 f ke - 20 = Ea = 0.47388735786807956 f ke - 21 = Ea = 0.18052851728316455 f ke - 22 = Ea = 0.06564673355751438 f ke - 23 = Ea = 0.022833646454728296 f ke - 24 = Ea = 0.0076112154847578495 f ke - 25 = Ea = 0.0024355889549951826 f ke - 26 = Ea = 0.0007494119863622473","title":"Pendekatan Deret MacLaurin"},{"location":"authors-notes/#pendekatan-deret-maclaurin","text":"DERET MacLaurin adalah Suatu fungsi f(x) yang memiliki turunan f'(x), f''(x), f'''(x) dan seterusnya yang kontinyu dalam interval I dengan a, x I maka untuk x disekitar a yaitu |x-a|< R , f(x) dapat diekspansi kedalam Deret Taylor. Dalam kasus khusus jika a=0 , maka disebut Deret MacLaurin atau sering disebut Deret Taylor baku. Dan didefinisikan sebagai berikut Definisi : $$ f(x)=f(0)+f\u2019(0)x \\displaystyle+\\frac{{{f}\\text{'}\\text{'}{\\left({0}\\right)}}}{{{2}!}}{x}^{2} \\displaystyle+\\frac{{{f}\\text{'}\\text{'}\\text{'}{\\left({0}\\right)}}}{{{3}!}}{x}^{3} \\displaystyle+\\ldots \\displaystyle+\\frac{{{{f}^{{\\text{n}}}{\\left({0}\\right)}}}}{{{n}!}}{x}^{n} $$ Atau bisa dinyatakan dengan: $$ f(x)=\\sum_{n=0}^\\infty \\frac{f^{(n)}n(0)}{n!}x^{n} $$ Deret MacLaurin sangat bermanfaat dalam metode numerik untuk menghitung atau menghampiri nilai-nilai fungsi yang sudah dihitung secara manual seperti nilai sin x, cos x , .","title":"Pendekatan Deret MacLaurin"},{"location":"authors-notes/#tugas","text":"Hitunglah e^2x untuk nilai x=4, kemudian expensikan hingga selisih yang dihasilkan kurang dari nilai error yang ditentukan yaitu e < 0,001.","title":"Tugas"},{"location":"authors-notes/#penyelesaian","text":"Fungsi awal exponen : $$ f(x) = e^{2x}\\ $$ Dapat juga didefinisikan dengan rumus : $$ e^{2x} = \\sum_{n=0}^\\infty \\frac{(2x)^n}{n!} = \\sum_{n=0}^\\infty (2)^n\\frac{x^n}{n!} $$ Tabel perhitungan untuk turunan exponensial : $$ \\begin{array}{|c|c|l|} \\hline f(x) & e^{2 x} & f(0)=1 \\ \\hline f^{\\prime}(x) & 2 e^{2 x} & f^{\\prime}(0)=2 \\ \\hline f^{\\prime \\prime}(x) & 4 e^{2 x} & f^{\\prime \\prime}(0)=4 \\ \\hline f^{\\prime \\prime \\prime}(x) & 8 e^{2 x} & f^{\\prime \\prime \\prime}(0)=8 \\ \\hline f^{\\prime \\prime \\prime \\prime}(x) & 16 e^{2 x} & f^{\\prime \\prime \\prime \\prime}(0)=16 \\ \\hline \\end{array} $$ Berikut adalah penyelesaian untuk mencari nilai expansi : $$ f(x)=f(0)+\\frac{f^{\\prime}(0)}{1 !} x+\\frac{f^{\\prime \\prime}(0)}{2 !} x^{2}+\\frac{f^{\\prime \\prime \\prime}(0)}{3 !} x^{3}+\\frac{f^{\\prime \\prime \\prime \\prime}(0)}{4 !} x^{4} + ... $$ nilai turunan pada tabel dimasukkan kedalam rumus sehingga didapatkan seperti ini : $$ f(x)=1+\\frac{2}{1 !} x+\\frac{4}{2 !} x^{2}+\\frac{8}{3 !} x^{3}+\\frac{16}{4 !} x^{4} + ... $$ kemudian, nilai x diganti dengan 4 : $$ f(x)=1+\\frac{2}{1 !} 4+\\frac{4}{2 !} 4^{2}+\\frac{8}{3 !} 4^{3}+\\frac{16}{4 !} 4^{4} + ... $$ perhitungan diatas akan terus berulang hingga nilai selisih mendekati nilai error yang ditentukan yaitu kurang dari 0,001","title":"Penyelesaian"},{"location":"authors-notes/#listing-program","text":"Script import math error = 0.001 def f ( x ): f_turunan = 1 current = i = 0 iteration = True while iteration : old = current current += ( f_turunan * ( x ** i )) / math . factorial ( i ) print ( 'f ke-' , i , '=' , 'Ea=' , current - old ) if current - old < error : iteration = False else : f_turunan *= 2 i += 1 f ( 4 ) Output f ke - 0 = Ea = 1.0 f ke - 1 = Ea = 8.0 f ke - 2 = Ea = 32.0 f ke - 3 = Ea = 85.33333333333333 f ke - 4 = Ea = 170.66666666666669 f ke - 5 = Ea = 273.0666666666666 f ke - 6 = Ea = 364.08888888888896 f ke - 7 = Ea = 416.1015873015872 f ke - 8 = Ea = 416.1015873015872 f ke - 9 = Ea = 369.8680776014112 f ke - 10 = Ea = 295.89446208112895 f ke - 11 = Ea = 215.195972422639 f ke - 12 = Ea = 143.46398161509296 f ke - 13 = Ea = 88.28552714774924 f ke - 14 = Ea = 50.448872655856576 f ke - 15 = Ea = 26.90606541645684 f ke - 16 = Ea = 13.45303270822842 f ke - 17 = Ea = 6.330838921519444 f ke - 18 = Ea = 2.8137061873417224 f ke - 19 = Ea = 1.184718394670199 f ke - 20 = Ea = 0.47388735786807956 f ke - 21 = Ea = 0.18052851728316455 f ke - 22 = Ea = 0.06564673355751438 f ke - 23 = Ea = 0.022833646454728296 f ke - 24 = Ea = 0.0076112154847578495 f ke - 25 = Ea = 0.0024355889549951826 f ke - 26 = Ea = 0.0007494119863622473","title":"Listing Program"},{"location":"tugas2/","text":"Program Newton Raphson pada Fungsi Non Linear \u00b6 Newton Raphson \u00b6 adalah metode pencarian akar suatu fungsi f(x) f(x) dengan pendekatan satu titik, dimana fungsi f(x) f(x) mempunyai turunan. Metode ini dianggap lebih mudah dari Metode Bagi Dua (Bisection Method) karena metode ini menggunakan pendekatan satu titik sebagai titik awal. Semakin dekat titik awal yang kita pilih dengan akar sebenarnya, maka semakin cepat konvergen ke akarnya. Prosedur Metode Newton : menentukan x_0 x_0 sebagai titik awal, kemudian menarik garis lurus (misal garis \\imath \\imath ) yang menyinggung titik f(x_0) f(x_0) . Hal ini berakibat garis \\imath \\imath memotong sumbu x x di titik x_1 x_1 Setelah itu diulangi langkah sebelumnya tapi sekarang x_1 x_1 dianggap sebagai titik awalnya. Dari mengulang langkah-langkah sebelumnya akan mendapatkan x_2 , x_3 , ... , x_n x_2 , x_3 , ... , x_n dengan x_n x_n yang diperoleh adalah bilangan riil yang merupakan akar atau mendekati akar yang sebenarnya. persamaan garis \\imath : y - y_0 = m(x - x_0) \\imath : y - y_0 = m(x - x_0) y - f(x_0) = f'(x_0)(x - x_0) y - f(x_0) = f'(x_0)(x - x_0) x_1 x_1 perpotongan garis \\imath \\imath dengan sumbu - x 0 - f(x_0) = f'(x_0)(x - x_0) 0 - f(x_0) = f'(x_0)(x - x_0) y = 0 dan x = x_1 x_1 maka koordinat titik ( x_1 x_1 ,0) - \\frac{f(x_0)}{f'(x_0)} = (x_1 - x_0) - \\frac{f(x_0)}{f'(x_0)} = (x_1 - x_0) sehingga di dapat sebuah rumus : x_1 = x_0 - \\frac{f(x_0)}{f'(x_0)} , x_2 = x_1 - \\frac{f(x_1)}{f'(x_1)}, ... , x_n = x_{n-1} - \\frac{f(x_{n-1})}{f'(x_{n-1})} x_1 = x_0 - \\frac{f(x_0)}{f'(x_0)} , x_2 = x_1 - \\frac{f(x_1)}{f'(x_1)}, ... , x_n = x_{n-1} - \\frac{f(x_{n-1})}{f'(x_{n-1})} Menyusun Algoritma dan Pemrograman Newton Rhapson \u00b6 dari rumus yang kita dapat diatas kita dapat menyusun sebuah algoritma yang nantinya akan dibuat menjadi sebuah program. Algoritma menyusun akar - akar f(x) = 0 f(x) = 0 sebagai berikut : Didefinisikan fungsi f f dengan f(x) f(x) dan f'(x) f'(x) Ditentukan Epsilon sebagai Toleransi kesalahan serta iterasi maksimum untuk Stopping Condition Dipilih tebakan awal x_0 x_0 Dihitung f( x_0 x_0 ) dan f'( x_0 x_0 ) Dihitung x_b = x_0 - \\frac{f(x_0)}{f'(x_0)}f'(x_0) \\neq 0 x_b = x_0 - \\frac{f(x_0)}{f'(x_0)}f'(x_0) \\neq 0 . jika f'(x_0) = 0 f'(x_0) = 0 kembali ke langkah - 3 Jika \\left | x_b - x_0 \\right | < \\varepsilon \\left | x_b - x_0 \\right | < \\varepsilon . itersasi lebih dari iterasi maksimum tulis x_{hampiran} = x_b x_{hampiran} = x_b sebagai hasil hampiran akar; jika tidak, lanjutkan ke langkah berikutnya. Ganti nilai x_0 x_0 dengan x_0 = x_b x_0 = x_b dan kembali ke langkah-4 Implementasi Pemrograman \u00b6 dari algoritma diatas , kita dapat menyusun sebuah program seperti berikut. import math e = 2.71828 def fungsi ( x ): x = float (( e ** x ) - ( 4 * x )) return x def fungsiturunan ( x ): x = float (( e ** x ) - ( 4 )) return x x = float ( input ( 'Masukkan nilai awal = ' )) error = float ( input ( 'Masukkan nilai error = ' )) perulangan = int ( input ( 'Masukkan maksimal pengulangan = ' )) iterasi = 0 selisih = error + 1 while iterasi <= perulangan and selisih > error : iterasi += 1 f_2 = x - ( fungsi ( x ) / fungsiturunan ( x )) selisih = math . fabs ( f_2 - x ) x = f_2 print ( \"Iterasi ke = \" , iterasi , \", x = \" , f_2 , \", f(\" , f_2 , \") = \" , fungsi ( f_2 ), \", selisih = \" , error ) if iterasi <= perulangan : print ( \"Perulangan Mencapai Batas Maksimal dengan hasil = \" , f_2 ) else : print ( \"Toleransi tidak terpenuhi\" ) Dengan Output sebagai berikut : Masukkan nilai awal = 0 Masukkan nilai error = 0.0001 Masukkan maksimal pengulangan = 20 Iterasi ke = 1 , x = 0.3333333333333333 , f ( 0.3333333333333333 ) = 0.06227877883196098 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3333333333333333 Iterasi ke = 2 , x = 0.35724635301940616 , f ( 0.35724635301940616 ) = 0.0004022049593612742 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35724635301940616 Iterasi ke = 3 , x = 0.35740281572145605 , f ( 0.35740281572145605 ) = 1.734656973617632e-08 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35740281572145605 Iterasi ke = 4 , x = 0.3574028224700733 , f ( 0.3574028224700733 ) = - 6.439293542825908e-15 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3574028224700733 Penjelasan : Importh Library math karena kita menggunakan contoh fungsi f(x) = e^x - 4X f(x) = e^x - 4X maka kita membuat sebuah fungsi yang sesuai , dan juga fungsi turunannya yaitu f'(x) = e^x - 4 f'(x) = e^x - 4 Membuat sebuah inputan untuk X , Error / Epsilon , serta Maksimal perulangan untuk stopping condition lalu deklarasikan iterasi = 0 untuk perulangan yang ke 0 nantinya dan akan ditambah setiap kali perulangan deklarasikan selisih untuk x_b - x_0 x_b - x_0 untuk perbandingan lakukan perulangan dengan kondisi iterasi kurang dari sama dengan inputan maksimal iterasi dan selisih lebih dari error / epsilon hitung x_b x_b dengan rumus yang sudah kita dapatkan sebelumnya lalu lakukan perbandingan jika mencapai nilai True maka toleransi tidak terpenuhi namun perulangan sudah mencapai batas jika pengecekan selisih > error bernilai bernilai True maka toleransi akan terpenuhi dengan nilai error serta fungsi x pada iterasi ke n","title":"Newthon Rapshon"},{"location":"tugas2/#program-newton-raphson-pada-fungsi-non-linear","text":"","title":"Program Newton Raphson pada Fungsi Non Linear"},{"location":"tugas2/#newton-raphson","text":"adalah metode pencarian akar suatu fungsi f(x) f(x) dengan pendekatan satu titik, dimana fungsi f(x) f(x) mempunyai turunan. Metode ini dianggap lebih mudah dari Metode Bagi Dua (Bisection Method) karena metode ini menggunakan pendekatan satu titik sebagai titik awal. Semakin dekat titik awal yang kita pilih dengan akar sebenarnya, maka semakin cepat konvergen ke akarnya. Prosedur Metode Newton : menentukan x_0 x_0 sebagai titik awal, kemudian menarik garis lurus (misal garis \\imath \\imath ) yang menyinggung titik f(x_0) f(x_0) . Hal ini berakibat garis \\imath \\imath memotong sumbu x x di titik x_1 x_1 Setelah itu diulangi langkah sebelumnya tapi sekarang x_1 x_1 dianggap sebagai titik awalnya. Dari mengulang langkah-langkah sebelumnya akan mendapatkan x_2 , x_3 , ... , x_n x_2 , x_3 , ... , x_n dengan x_n x_n yang diperoleh adalah bilangan riil yang merupakan akar atau mendekati akar yang sebenarnya. persamaan garis \\imath : y - y_0 = m(x - x_0) \\imath : y - y_0 = m(x - x_0) y - f(x_0) = f'(x_0)(x - x_0) y - f(x_0) = f'(x_0)(x - x_0) x_1 x_1 perpotongan garis \\imath \\imath dengan sumbu - x 0 - f(x_0) = f'(x_0)(x - x_0) 0 - f(x_0) = f'(x_0)(x - x_0) y = 0 dan x = x_1 x_1 maka koordinat titik ( x_1 x_1 ,0) - \\frac{f(x_0)}{f'(x_0)} = (x_1 - x_0) - \\frac{f(x_0)}{f'(x_0)} = (x_1 - x_0) sehingga di dapat sebuah rumus : x_1 = x_0 - \\frac{f(x_0)}{f'(x_0)} , x_2 = x_1 - \\frac{f(x_1)}{f'(x_1)}, ... , x_n = x_{n-1} - \\frac{f(x_{n-1})}{f'(x_{n-1})} x_1 = x_0 - \\frac{f(x_0)}{f'(x_0)} , x_2 = x_1 - \\frac{f(x_1)}{f'(x_1)}, ... , x_n = x_{n-1} - \\frac{f(x_{n-1})}{f'(x_{n-1})}","title":"Newton Raphson"},{"location":"tugas2/#menyusun-algoritma-dan-pemrograman-newton-rhapson","text":"dari rumus yang kita dapat diatas kita dapat menyusun sebuah algoritma yang nantinya akan dibuat menjadi sebuah program. Algoritma menyusun akar - akar f(x) = 0 f(x) = 0 sebagai berikut : Didefinisikan fungsi f f dengan f(x) f(x) dan f'(x) f'(x) Ditentukan Epsilon sebagai Toleransi kesalahan serta iterasi maksimum untuk Stopping Condition Dipilih tebakan awal x_0 x_0 Dihitung f( x_0 x_0 ) dan f'( x_0 x_0 ) Dihitung x_b = x_0 - \\frac{f(x_0)}{f'(x_0)}f'(x_0) \\neq 0 x_b = x_0 - \\frac{f(x_0)}{f'(x_0)}f'(x_0) \\neq 0 . jika f'(x_0) = 0 f'(x_0) = 0 kembali ke langkah - 3 Jika \\left | x_b - x_0 \\right | < \\varepsilon \\left | x_b - x_0 \\right | < \\varepsilon . itersasi lebih dari iterasi maksimum tulis x_{hampiran} = x_b x_{hampiran} = x_b sebagai hasil hampiran akar; jika tidak, lanjutkan ke langkah berikutnya. Ganti nilai x_0 x_0 dengan x_0 = x_b x_0 = x_b dan kembali ke langkah-4","title":"Menyusun Algoritma dan Pemrograman Newton Rhapson"},{"location":"tugas2/#implementasi-pemrograman","text":"dari algoritma diatas , kita dapat menyusun sebuah program seperti berikut. import math e = 2.71828 def fungsi ( x ): x = float (( e ** x ) - ( 4 * x )) return x def fungsiturunan ( x ): x = float (( e ** x ) - ( 4 )) return x x = float ( input ( 'Masukkan nilai awal = ' )) error = float ( input ( 'Masukkan nilai error = ' )) perulangan = int ( input ( 'Masukkan maksimal pengulangan = ' )) iterasi = 0 selisih = error + 1 while iterasi <= perulangan and selisih > error : iterasi += 1 f_2 = x - ( fungsi ( x ) / fungsiturunan ( x )) selisih = math . fabs ( f_2 - x ) x = f_2 print ( \"Iterasi ke = \" , iterasi , \", x = \" , f_2 , \", f(\" , f_2 , \") = \" , fungsi ( f_2 ), \", selisih = \" , error ) if iterasi <= perulangan : print ( \"Perulangan Mencapai Batas Maksimal dengan hasil = \" , f_2 ) else : print ( \"Toleransi tidak terpenuhi\" ) Dengan Output sebagai berikut : Masukkan nilai awal = 0 Masukkan nilai error = 0.0001 Masukkan maksimal pengulangan = 20 Iterasi ke = 1 , x = 0.3333333333333333 , f ( 0.3333333333333333 ) = 0.06227877883196098 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3333333333333333 Iterasi ke = 2 , x = 0.35724635301940616 , f ( 0.35724635301940616 ) = 0.0004022049593612742 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35724635301940616 Iterasi ke = 3 , x = 0.35740281572145605 , f ( 0.35740281572145605 ) = 1.734656973617632e-08 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.35740281572145605 Iterasi ke = 4 , x = 0.3574028224700733 , f ( 0.3574028224700733 ) = - 6.439293542825908e-15 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3574028224700733 Penjelasan : Importh Library math karena kita menggunakan contoh fungsi f(x) = e^x - 4X f(x) = e^x - 4X maka kita membuat sebuah fungsi yang sesuai , dan juga fungsi turunannya yaitu f'(x) = e^x - 4 f'(x) = e^x - 4 Membuat sebuah inputan untuk X , Error / Epsilon , serta Maksimal perulangan untuk stopping condition lalu deklarasikan iterasi = 0 untuk perulangan yang ke 0 nantinya dan akan ditambah setiap kali perulangan deklarasikan selisih untuk x_b - x_0 x_b - x_0 untuk perbandingan lakukan perulangan dengan kondisi iterasi kurang dari sama dengan inputan maksimal iterasi dan selisih lebih dari error / epsilon hitung x_b x_b dengan rumus yang sudah kita dapatkan sebelumnya lalu lakukan perbandingan jika mencapai nilai True maka toleransi tidak terpenuhi namun perulangan sudah mencapai batas jika pengecekan selisih > error bernilai bernilai True maka toleransi akan terpenuhi dengan nilai error serta fungsi x pada iterasi ke n","title":"Implementasi Pemrograman"},{"location":"tugas3/","text":"Metode Gauss Jordan, Iterasi Jacobi, dan Gauss Seidel Eliminasi Gauss Jordan Eliminasi gauss adalah suatu metode untuk mengoperasikan nilai-nilai di dalam matriks sehingga menjadi matriks yang lebih sederhana lagi. Dengan melakukan operasi baris sehingga matriks tersebut menjadi matriks yang baris. Ini dapat digunakan sebagai salah satu metode penyelesaian persamaan linear dengan menggunakan matriks. Caranya dengan mengubah persamaan linear tersebut ke dalam matriks teraugmentasi dan mengoperasikannya. Setelah menjadi matriks baris, lakukan substitusi balik untuk mendapatkan nilai dari variabel-variabel tersebut. Sedangkan, eliminasi gauss-jordan adalah pengembangan dari eliminasi gauss yang hasilnya lebih sederhana lagi. Caranya adalah dengan meneruskan operasi baris dari eliminasi gauss sehingga menghasilkan matriks yang eselon-baris. Ini juga dapat digunakan sebagai salah satu metode penyelesaian persamaan linear dengan menggunakan matriks. Metode ini digunakan untuk mencari invers dari sebuah matriks. Prosedur umum untuk metode eliminasi gauss-jordan ini adalah: Ubah sistem persamaan linier yang ingin dihitung menjadi matriks augmentasi. Lakukan operasi baris elementer pada matriks augmentasi (A|b) untuk mengubah matriks. Adapun formula untuk eliminasi maju ( Forward Elimination ) sebagai berikut: $$ a_{ij} = a_{ij}-(\\frac {a_ik}{a_kk}) a_{kj} dimana (k<=j<=n) $$ x_{n-2} = \\frac{b_{n-2}-a_{n-2,n}x_{n}-a_{n-2,n-1}x_{n-1}}{a_{n-2,n-2}} x_{n-2} = \\frac{b_{n-2}-a_{n-2,n}x_{n}-a_{n-2,n-1}x_{n-1}}{a_{n-2,n-2}} ................................ ................................ x_{i}=\\frac{b_{i}-\\sum_{j=i+1}^{n} a_{i.j}x_{j}}{a_i,j} x_{i}=\\frac{b_{i}-\\sum_{j=i+1}^{n} a_{i.j}x_{j}}{a_i,j} Source Code import numpy as np #Definisi Matrix A = [] B = [] n = int ( input ( \"Masukkan ordo Matrix: \" )) for i in range ( n ): baris = [] for i in range ( n ): a = int ( input ( \"Masukkan Nilai: \" )) baris . append ( a ) A . append ( baris ) for i in range ( n ): h = int ( input ( \"Masukkan Hasil: \" )) B . append ( h ) Matrix = np . array ( A , float ) Hasil = np . array ( B , float ) n = len ( Matrix ) #Eliminasi Gauss for k in range ( 0 , n - 1 ): for i in range ( k + 1 , n ): if Matrix [ i , k ] != 0 : lam = Matrix [ i , k ] / Matrix [ k , k ] Matrix [ i , k : n ] = Matrix [ i , k : n ] - ( Matrix [ k , k : n ] * lam ) Hasil [ i ] = Hasil [ i ] - ( Hasil [ k ] * lam ) print ( \"Matrix A : \" , ' \\n ' , Matrix ) #Subtitution x = np . zeros ( n , float ) for m in range ( n - 1 , - 1 , - 1 ): x [ m ] = ( Hasil [ m ] - np . dot ( Matrix [ m , m + 1 : n ], x [ m + 1 : n ])) / Matrix [ m , m ] print ( 'Nilai X ' , m + 1 , '=' , x [ m ]) Output: Masukkan ordo Matrix : 3 Masukkan Nilai : 1 Masukkan Nilai : - 1 Masukkan Nilai : 4 Masukkan Nilai : 1 Masukkan Nilai : 4 Masukkan Nilai : 2 Masukkan Nilai : 3 Masukkan Nilai : 4 Masukkan Nilai : 2 Masukkan Hasil : 12 Masukkan Hasil : - 2 Masukkan Hasil : 2 Matrix A : [[ 1. - 1. 4. ] [ 0. 5. - 2. ] [ 0. 0. - 7.2 ]] Nilai X 3 = 2.0000000000000004 Nilai X 2 = - 2.0 Nilai X 1 = 1.9999999999999982 Eliminasi Gauss Jacobi Metode iterasi jacobi merupakan salah satu bidang analisis numerik yang digunakan untuk menyelesaikan permasalahan persamaan linier dan sering dijumpai dalam berbagai disiplin ilmi. Metode iterasi jacobi merupakan salah satu metode tak langsung, yaitu bermula dari suatu hampiran penyelesaian awal dan kemudian berusaha memperbaiki hampiran dalam tak terhingga namun langkah konvergen. Metode iterasi jacobi ini digunakan untuk menyelesaikan linier berukuran besar dan proporsi koefisien nolnya besar. Jika ingin mengubah dalam sistem persamaan linier, maka dapat ditulis sebagai berikut: $$ A_{x}=b $$ Kemudian diketahui bahwa A= D + (L + U), dimana D merupakan matriks diagonal, L merupakan matrisk segitiga bawah, dan U merupakan matriks segitiga atas. Lalu persamaan tersebut diubah menjadi sebagai berikut: $$ D_{x}+ (L+U)x=b $$ x=D^-1[b-(L+U)x] x=D^-1[b-(L+U)x] Jika ditulis dalam aturan iteratif, maka metode itersai jacobi dapat ditulis sebagai berikut: $$ X^{(k)}=D^-1(b-(L+U)X^{(k-1)} $$ Dimana k merupakan banyaknya iterasi. Jika x_k menyatakan hampiran ke - k penyelesaian SPL, maka x_0 adalah hampiran awal. $$ x_{i}^{(k)}=\\frac{1}{a_{ii}}(\\sum x^{n}_{j\\ne i}),i = 1,2,...n;k=1,2,3,..., $$ Suatu matriks A berukuran n x n dikatakan dominan secara diagonal jika: |a_{ii}|>|a_{i,1}|+...+|a_{i,i-1}|+|a_{i,i+1}|+...+|a_{in}| |a_{ii}|>|a_{i,1}|+...+|a_{i,i-1}|+|a_{i,i+1}|+...+|a_{in}| Source Code rom pprint import pprint from numpy import array , zeros , diag , diagflat , dot import numpy as np def jacobi ( A , b , N = 25 , x = None ): #Membuat iniial guess if x is None : x = zeros ( len ( A [ 0 ])) #Membuat vektor dari elemen matrix A D = diag ( A ) R = A - diagflat ( D ) #Iterasi for i in range ( N ): x = ( b - dot ( R , x )) / D return x Mat1 = [] Mat2 = [] n = int ( input ( \"Masukkan ukuran Matrix: \" )) for i in range ( n ): baris = [] for i in range ( n ): a = int ( input ( \"Masukkan Nilai: \" )) baris . append ( a ) Mat1 . append ( baris ) for i in range ( n ): h = int ( input ( \"Masukkan Hasil: \" )) Mat2 . append ( h ) A = array ( Mat1 , float ) b = array ( Mat2 , float ) x = len ( Mat1 ) guess = np . zeros ( x , float ) sol = jacobi ( A , b , N = 25 , x = guess ) print ( \"A:\" ) pprint ( A ) print ( \"b:\" ) pprint ( b ) print ( \"x:\" ) pprint ( sol ) A = array ( Ma Output: Masukkan ukuran Matrix : 3 Masukkan Nilai : 5 Masukkan Nilai : 1 Masukkan Nilai : 2 Masukkan Nilai : 5 Masukkan Nilai : 5 Masukkan Nilai : 1 Masukkan Nilai : 2 Masukkan Nilai : 1 Masukkan Nilai : 2 Masukkan Hasil : 3 Masukkan Hasil : 4 Masukkan Hasil : 2 A : array ([[ 5. , 1. , 2. ], [ 5. , 5. , 1. ], [ 2. , 1. , 2. ]]) b : array ([ 3. , 4. , 2. ]) x : array ([ 0.48290144 , 0.57758114 , 0.74168875 ]) Eliminasi Gauss Seidel Metode gauss seidel digunakan untuk menyelesaikan sistem persamaan linier (SPL) berukuran besar dan proporsi koefisien nolnya besar, seperti sistem-sistem yang banyak ditemukan dalam sistem persamaan diferensial. Metode iterasi gauss seidel dikembangkan dari gagasan metode iterasi pada solusi persamaan tak linier. Teknik iterasi jarang digunakan untuk menyelesaikan SPL berukuran kecil karena metode-metode langsung seperti metode eliminasi gauss lebih efisien daripada metode iteratif. namun untuk SPL berukuran besar dengan presentase elemen nol pada matriks koefisien besar, teknik iterasi lebih efisien daripada metode langsung dalam hal penggunaan memori komputer maupun waktu komputasi. Dengan metode iterasi gauss seidel sesatan pembulatan dapat diperkecil karena dapat meneruskan iterasi sampai solusinya seteliti mungkin sesuai dengan batas sesatan yang diperbolehkan. Rumus umum untuk iterasi gauss seidel: $$ x_{i} = \\frac{1}{a_{ii}}(b_{i}-\\sum_{j=1}^{i-1}a_{ij}x_{j}^{(k)}-\\sum_{j=i+1}^{n}a_{ij}x_{j}^{(k-1)}), i = 1,2,...,n;k=1,2,3,... $$ Source Code def seidel ( a , x , b ): #Mencari Panjang Matrix n = len ( a ) for j in range ( 0 , n ): d = b [ j ] #Menghitung xi, yi, zi for i in range ( 0 , n ): if ( j != i ): d -= a [ j ][ i ] * x [ i ] x [ j ] = d / a [ j ][ j ] #Solusi return x m = int ( input ( \"Masukkan Panjang Matrix: \" )) a = [] b = [] for k in range ( m ): mat1 = [] for i in range ( m ): l = float ( input ( \"Masukkan a\" + str ( k + 1 ) + \",\" + str ( i + 1 ) + \": \" )) mat1 . append ( l ) h = float ( input ( \"Masukkan Hasil: \" )) b . append ( h ) a . append ( mat1 ) n = 3 x = [ 0 , 0 , 0 ] print ( x ) for i in range ( 0 , 100 ): x = seidel ( a , x , b ) print ( x ) Output: Output: Masukkan Panjang Matrix : 3 Masukkan a1 , 1 : 4 Masukkan a1 , 2 : - 1 Masukkan a1 , 3 : 1 Masukkan Hasil : 7 Masukkan a2 , 1 : 4 Masukkan a2 , 2 : - 8 Masukkan a2 , 3 : 1 Masukkan Hasil : - 21 Masukkan a3 , 1 : - 2 Masukkan a3 , 2 : 1 Masukkan a3 , 3 : 5 Masukkan Hasil : 15 [ 0 , 0 , 0 ] [ 1.75 , 3.5 , 3.0 ] [ 1.875 , 3.9375 , 2.9625 ] [ 1.99375 , 3.9921875 , 2.9990625 ] [ 1.99828125 , 3.9990234375 , 2.9995078125 ] [ 1.99987890625 , 3.9998779296875 , 2.9999759765625003 ] [ 1.99997548828125 , 3.9999847412109375 , 2.999993247070312 ] [ 1.9999978735351562 , 3.9999980926513667 , 2.999999530883789 ] [ 1.9999996404418945 , 3.9999997615814205 , 2.9999999038604734 ] [ 1.9999999644302369 , 3.9999999701976776 , 2.9999999917325595 ] [ 1.9999999946162794 , 3.9999999962747097 , 2.99999999859157 ] [ 1.9999999994207849 , 3.9999999995343387 , 2.9999999998614464 ] [ 1.9999999999182232 , 3.999999999941793 , 2.999999999978931 ] [ 1.9999999999907154 , 3.999999999992724 , 2.9999999999977414 ] [ 1.9999999999987457 , 3.9999999999990905 , 2.9999999999996803 ] [ 1.9999999999998526 , 3.9999999999998863 , 2.9999999999999636 ] [ 1.9999999999999807 , 3.999999999999986 , 2.999999999999995 ] [ 1.9999999999999978 , 3.9999999999999987 , 2.9999999999999996 ] [ 1.9999999999999996 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ] [ 2.0 , 4.0 , 3.0 ]","title":"Metode Gauss Jordan,Iterasi Jacobi dan Gauss Seidel"},{"location":"tugas4/","text":"INTEGRASI NUMERIK Metode Recursive Trapezoid Metode aturan trapesium adalah suatu teknik untuk mendekati integral yang pasti. Menurut teorema dasar rumus integral dapat dihitung dengan rumus seperti berikut: {\\displaystyle \\int _{a}^{b}f(x)\\,dx=F(b)-F(a)} {\\displaystyle \\int _{a}^{b}f(x)\\,dx=F(b)-F(a)} Dengan F(x) adalah antiderivatif f(x) (yakni F\u2019(x)=f(x) ). Banyak integral tentu yang dapat dihitung dengan rumus tesebut, namun demikian, tidak sedikit integral tentu yang tidak dapat dihitung dengan rumus di atas, hal itu dikarenakan integral f(x) tidak mempunyai antiderivatif yang dapat dinyatakan dalam fungsi-fungsi elementer. Dalam hal ini perhitungan yang dapat dilakukan adalah secara numerik. Integrasi numerik merupakan suatu alat utama yang digunakan para ilmuwan untuk mendapatkan nilai-nilai hampiran untuk integral tentu yang tidak dapat diselesaikan secara analitik. Dalam mendapatkan nilai-nilai hampiran integral tentu digunakan banyak metode, salah satu metode yang dapat digunakan adalah Aturan Trapesium Rekursif. Berikut akan dijelaskan penghitungan integral tentu menggunakan Aturan Trapesium Rekursif. Aturan Trapesium Rekursif Aturan trapesium bekerja dengan cara mendekati daerah bawah grafik fungsi f(x) sebagai trapesium dan menghitung luas daerah yang terasir. Aturan trapesium juga dapat dikatakan sebagai hasil yang diperoleh dari rata-rata jumlah Reimann kiri dan kanan. Pendekatan integral lebih baik dilakukan dengan mempartisi inerval integrasi dan menerapkan aturan trapesium untuk setiap subinterval dan kemudian menjumlahkan hasilnya. Estimasi berdasarkan 1 interval : $$ h=b-a $$ R(0,0) = \\frac{b-a}{2}(f(a)+f(b)) R(0,0) = \\frac{b-a}{2}(f(a)+f(b)) Estimasi berdasarkan 2 interval : $$ h = \\frac{b-a}{2} $$ R(1,0) = \\frac{b-a}{2}\\left [(f(a+h)+\\frac{1}{2}(f(a)+f(b)) \\right ] R(1,0) = \\frac{b-a}{2}\\left [(f(a+h)+\\frac{1}{2}(f(a)+f(b)) \\right ] R(1,0) = \\frac{1}{2}R(0,0)+h[f(a+h)] R(1,0) = \\frac{1}{2}R(0,0)+h[f(a+h)] Metode Trapesium Rekursif $$ R(0,0) = \\frac{b-a}{2}[f(a)+f(b)] $$ R(n,0) = \\frac{1}{2}R(n-1,0)+h \\left [ \\sum _{k=1}^{2(n-1)}f(a+(2k-1)h)\\right ] R(n,0) = \\frac{1}{2}R(n-1,0)+h \\left [ \\sum _{k=1}^{2(n-1)}f(a+(2k-1)h)\\right ] Algoritma Integral Trapezoid Definisikan y=f(x) y=f(x) Tentukan batas bawah (a) dan batas atas integrasi (b) Tentukan jumlah pembagi n Hitung h=\\frac{(b-a)}{2^n} h=\\frac{(b-a)}{2^n} Hitung L = \\frac{h}{2}\\left (f_{0}+2\\sum_{i=1}^{n-1}f_{i}+f_{n} \\right ) L = \\frac{h}{2}\\left (f_{0}+2\\sum_{i=1}^{n-1}f_{i}+f_{n} \\right ) Code def fungsi ( x ) : y = 1 / ( 1 + x ) return y print ( \"f(x) = 1/(1+x)\" ) a = float ( input ( \"Masukkan batas bawah integral : \" )) b = float ( input ( \"Masukkan batas atas integral : \" )) c = int ( input ( \"masukkan n : \" )) eror = [] for iterasi in range ( 0 , c ): n = 2 ** iterasi h = ( b - a ) / n xi = a y = 0 for i in range ( 1 , n ): xi = xi + h y += fungsi ( xi ) hasil = ( h ) * (( fungsi ( a ) + ( 2 * y ) + fungsi ( b )) / 2 ) eror . append ( hasil ) print ( 'iterasi ke-' , iterasi + 1 , \"n:\" , n , 'hasil =' , hasil ) print ( eror [ iterasi - 1 ]) print ( eror [ iterasi ]) akhir = ( eror [ iterasi - 1 ] - eror [ iterasi ]) print ( akhir ) print ( \"estimasi error : \" + str ( akhir )) Output: f ( x ) = 1 / ( 1 + x ) Masukkan batas bawah integral : 2 Masukkan batas atas integral : 6 masukkan n : 8 iterasi ke - 1 n : 1 hasil = 0.9523809523809523 iterasi ke - 2 n : 2 hasil = 0.8761904761904762 iterasi ke - 3 n : 4 hasil = 0.8547619047619047 iterasi ke - 4 n : 8 hasil = 0.8491813741813743 iterasi ke - 5 n : 16 hasil = 0.8477698845652135 iterasi ke - 6 n : 32 hasil = 0.847415938934486 iterasi ke - 7 n : 64 hasil = 0.8473273845698198 iterasi ke - 8 n : 128 hasil = 0.8473052417171961 0.8473273845698198 0.8473052417171961 2.214285262369664e-05 estimasi error : 2.214285262369664e-05","title":"Metode Racursive Trapezoid"}]}